#!/usr/bin/env bash
export DIR="$(cd "$(dirname "${BASH_SOURCE[0]}" )" && pwd)"

function addBashPath {
    BU_PATH=$HOME/.bashrc
    backupFile "$BU_PATH"
    newPath="export PATH=$1:\$PATH"
    bash -c "grep -q -F '$newPath' $BU_PATH || echo '$newPath' >> $BU_PATH"
    source $BU_PATH
}

function backupFile {
    if [ ! -f $1.ORIGINAL ]; then
        cp $1 $1.ORIGINAL
    fi
}

function installChrome {
    sudo apt --fix-broken install -y
    sudo apt-get install gdebi-core -y
    sudo apt --fix-broken install -y
    cd /tmp
    rm -f /google-chrome-stable_current_amd64.deb
    wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    sudo dpkg -i google-chrome-stable_current_amd64.deb
    rm -f google-chrome-stable_current_amd64.deb
    sudo apt --fix-broken install -y
}

function installCode {
    sudo apt install curl gpg software-properties-common apt-transport-https -y
    curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
    echo "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" \
         | sudo tee /etc/apt/sources.list.d/vscode.list
    sudo apt update
    sudo apt install code -y
}

function installDeps {
    export DEBIAN_FRONTEND=noninteractive
    sudo apt --fix-broken install -y
    sudo apt-get update
    sudo apt-get install -y debconf-utils
    sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --force-yes r-base \
    build-essential binutils bzip2 cloc curl eog gedit ghex \
    gnuplot imagemagick jq make net-tools \
    npm openjdk-14-jdk-headless p7zip-full \
    python3-pip retext strace sysvbanner tree \
    valgrind volatility wget
    sudo apt-get autoremove -y
    sudo apt --fix-broken install -y
}

function installDocker {
    sudo apt --fix-broken install -y
    sudo rm -f /usr/bin/docker-compose
    curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add 
    sudo bash -c "echo 'deb [arch=amd64] https://download.docker.com/linux/debian buster stable' > /etc/apt/sources.list.d/docker.list"
    sudo apt-key fingerprint 0EBFCD88
    sudo apt-get update
    sudo apt-get remove docker docker-engine docker.io containerd runc -y
    sudo apt-get update
    sudo apt-get install apt-transport-https ca-certificates gnupg-agent software-properties-common -y  
    sudo apt-get install docker-ce docker-ce-cli containerd.io -y
    sudo docker run hello-world
    sudo docker run hello-world
    sudo systemctl stop docker
    sudo systemctl enable docker
    sudo systemctl start docker
    sudo groupadd docker
    sudo usermod -aG docker $USER
    newgrp docker 
    sudo curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
    docker --version
    docker-compose --version
}

function installNodeJs {
    cd /tmp
    sudo apt autoremove
    rm -f nodesource_setup.sh
    curl -sL https://deb.nodesource.com/setup_12.x -o nodesource_setup.sh    
    chmod +x nodesource_setup.sh
    sudo ./nodesource_setup.sh
    sudo apt-get install nodejs -y
    nodesource_setup.sh
    sudo apt autoremove
    curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
    echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
    sudo apt-get update && sudo apt-get install yarn -y
    rm -f nodesource_setup.sh
    cd ${DIR}
}

function installTypora {
    wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add -
    sudo add-apt-repository 'deb https://typora.io/linux ./'
    sudo apt-get update
    sudo apt-get install typora
}

function installVim {
	sudo apt-get install -y vim 
	cat << EOL > /tmp/VIMRC
filetype plugin indent off
set tabstop=4
set shiftwidth=4
set expandtab
set vb t_vb=
syntax on
colorscheme default 
autocmd FileType make setlocal ts=4 sts=4 sw=4 noexpandtab
autocmd FileType c setlocal ts=4 sts=4 sw=4 expandtab
autocmd FileType cpp setlocal ts=4 sts=4 sw=4 expandtab
autocmd FileType html setlocal ts=4 sts=4 sw=4 expandtab
autocmd FileType java setlocal ts=4 sts=4 sw=4 expandtab
autocmd FileType javascript setlocal ts=4 sts=4 sw=4 expandtab
autocmd FileType json setlocal ts=4 sts=4 sw=4 expandtab
autocmd FileType php setlocal ts=4 sts=4 sw=4 expandtab
autocmd FileType python setlocal ts=4 sts=4 sw=4 expandtab
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType c,cpp,html,java,javascript,json,php,python,yaml autocmd BufWritePre <buffer> %s/\s\+$//e
EOL
	mv /tmp/VIMRC ~/.vimrc
}

function setupGit {
    sudo apt-get install -y git 
    git config --global user.name 'John L. Whiteman'
    git config --global user.email '<>'
    git config --global core.editor vim 
}

function setupOs {
    pathy=~/.bashrc
    backupFile "$pathy"
    tmpy="export PATH=${DIR}:\$PATH"
    grep -qF "$tmpy" "$pathy" || echo "$tmpy" >> "$pathy"
    echo -e '[com.canonical.unity-greeter]\nplay-ready-sound = false' \
    | sudo tee -a /usr/share/glib-2.0/schemas/50_unity-greeter.gschema.override
    sudo glib-compile-schemas /usr/share/glib-2.0/schemas/
    pathy=/etc/inputrc
    tmpy="set bell-style none"
    sudo sed -i 's/# set bell-style none/set bell-style none/' $pathy
    pathy=~/.inputrc
    touch $pathy
    grep -qF "$tmpy" "$pathy" || echo "$tmpy" >> "$pathy"
    pathy=~/.bash_profile
    tmpy="setterm -blength 0"
    touch $pathy
    grep -qF "$tmpy" "$pathy" || echo "$tmpy" >> "$pathy"
    ulimit -c unlimited
}

function setupPython {
    sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.8 1
    sudo update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1 
}

sudo ls >/dev/null
installDeps
setupGit
installVim
setupPython
installDocker
installChrome
installCode
setupOs
installNodeJs
installTypora
